# Generated by Django 3.0.6 on 2020-09-22 04:04

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('mainapp', '0003_auto_20200917_0527'),
        ('authapp', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Game',
            fields=[
                ('basegame_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='mainapp.BaseGame')),
                ('status', models.CharField(choices=[('Набор игроков', 'Набор игроков'), ('Раздача карт', 'Раздача карт'), ('Чей-то ход', 'Чей-то ход'), ('Конец игры', 'Конец игры')], max_length=20)),
                ('members', models.ManyToManyField(through='authapp.Membership', to=settings.AUTH_USER_MODEL)),
            ],
            bases=('mainapp.basegame',),
        ),
        migrations.CreateModel(
            name='KlassCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='KlassRelationShip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_modificator', models.SmallIntegerField(verbose_name='Модификатор силы монстра в зависимости от класса манчкина')),
                ('can_drive_away', models.BooleanField(default=False, verbose_name='Может просто прогнать монстра')),
                ('damage_modificator', models.SmallIntegerField(verbose_name='Сколько уровней теряет манчкин при поражении в зависимости от класса')),
                ('adv_treasure', models.SmallIntegerField(default=0, verbose_name='Манчкин в зависимости от класса тянет дополнительные сокровища')),
                ('klass', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='munchkin.KlassCard')),
            ],
        ),
        migrations.CreateModel(
            name='MonsterCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('level', models.SmallIntegerField(verbose_name='уровень монстра')),
                ('is_undead', models.BooleanField(default=False, verbose_name='Монстер - андед?')),
                ('treasure_count', models.SmallIntegerField(verbose_name='кол-во сокровищ, которое дают за победу в бою с этим монстром')),
                ('damage_desc', models.CharField(max_length=300, verbose_name='описание непотребства при смывке')),
                ('level_down_nom', models.PositiveSmallIntegerField(default=1, verbose_name='номинальное кол-во уровней, которое теряет проигравший монстру манчкин')),
                ('level_up_nom', models.PositiveSmallIntegerField(default=1, verbose_name='номинальное кол-во уровней, которое даёт побеждённый монстр')),
                ('must_find_other_gender_munchkin', models.BooleanField(default=False, verbose_name='Ты должен искать помощи у манчкина другого пола')),
                ('weapon_is_unactive_in_next_fight', models.BooleanField(default=False, verbose_name='Твоё оружие бесполезно в следущем бою')),
                ('not_must_fight', models.BooleanField(default=False, verbose_name='Можешь биться по желанию')),
                ('is_damage_modificator_cube', models.BooleanField(default=False, verbose_name='Манчкин теряет столько уровней, сколько выпало на кубике')),
                ('damage_lost_class_and_race', models.BooleanField(default=False, verbose_name='Манчкин теряет все карты рас и классов')),
                ('esc_auto', models.BooleanField(default=False, verbose_name='Автоматическая смывка от этого монстра')),
                ('double_damage_from_fire', models.BooleanField(default=False, verbose_name='Огненные шмотки наносят этому монстру двойной урон')),
                ('power_modificator_assistant', models.SmallIntegerField(default=0, verbose_name='Модификатор силы монстра в зависимости от наличия помощника у манчкина')),
                ('dont_touch_level', models.SmallIntegerField(default=1, verbose_name='Уровень манчкинов, с которого преследует этот монстр')),
                ('must_fight', models.BooleanField(default=False, verbose_name='Должен биться, даже если обычный манчкин может не делать этого')),
                ('can_change_treasure', models.BooleanField(default=False, verbose_name='Манчкин может заменить две карты сокровищ с руки на две из колоды')),
                ('gender_modificator', models.SmallIntegerField(default=0, verbose_name='Сколько уровней теряет манчкин в зависимости от пола')),
                ('lost_cards', models.BooleanField(default=False, verbose_name='Каждый соперник в порядке убывания уровня забирает у тебя одну карту')),
                ('lost_cards_by_cube', models.SmallIntegerField(default=0, verbose_name='Сбрось столько карт, сколько выпало на кубике')),
                ('lost_all_cards', models.BooleanField(default=False, verbose_name='Каждый соперник, начиная с левого забирает у тебя одну карту, оставшиеся сбрось')),
                ('must_discard_all_cards', models.BooleanField(default=False, verbose_name='Манчкин должен сбросить все карты с руки')),
                ('lost_big_things', models.BooleanField(default=False, verbose_name='Сбрось все большие шмотки')),
                ('lost_armor', models.BooleanField(default=False, verbose_name='Потеряй бронник')),
                ('esc_modif_cube', models.SmallIntegerField(default=0, verbose_name='Модификатор очков на кубике при смывке')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Munchkin',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.PositiveSmallIntegerField(default=1, verbose_name='Уровень манчкина')),
                ('is_next_move', models.BooleanField(default=False, verbose_name='Его ход следущий')),
                ('is_want_to_continue', models.BooleanField(default=True, verbose_name='Хочет продолжать участие в подкидывании карт бьющемуся манчкину')),
                ('discard_count', models.SmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(3)], verbose_name='Количество карт, которые может сбросить манчкин для усиления себя во время каждого боя')),
                ('undercut_count', models.SmallIntegerField(default=0, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Количество раз, которое манчкин с классом Ворможет подрезать одного игрока в бою')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='munchkin.Game')),
                ('gamer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('next', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
        ),
        migrations.CreateModel(
            name='RaceCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('quantity_cards', models.SmallIntegerField(verbose_name='количество карт, которое может находиться в руке игрока в конце хода')),
                ('munchkin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TreasuresCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('is_headdress', models.BooleanField(default=False, verbose_name='Карта головняка')),
                ('is_armor', models.BooleanField(default=False, verbose_name='Карта бронника')),
                ('is_for_hands', models.BooleanField(default=False, verbose_name='Шмотка в руки')),
                ('is_footwear', models.BooleanField(default=False, verbose_name='Обувка')),
                ('bonus', models.PositiveSmallIntegerField(default=0, verbose_name='номинальная сила сокровища, при наличии')),
                ('price_nom', models.IntegerField(default=0, verbose_name='Номинальная цена шмотки')),
                ('is_big_size', models.BooleanField(default=False, verbose_name='Это большая шмотка')),
                ('how_many_hands_take', models.PositiveSmallIntegerField(default=0, verbose_name='сколько рук занимает')),
                ('is_one_time', models.BooleanField(default=False, verbose_name='Это разовая шмотка')),
                ('is_moment', models.CharField(choices=[('в любое время', 'в любое время'), ('в бою', 'в бою'), ('в свой ход', 'в свой ход'), ('при смывке', 'при смывке'), ('после успешной смывки', 'после успешной смывки')], max_length=30, verbose_name='когда можно играть шмотку')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('for_klasses_only', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.KlassCard')),
                ('for_races_only', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.RaceCard')),
                ('munchkin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RaceRelationShip',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('power_modificator', models.SmallIntegerField(verbose_name='Модификатор силы монстра в зависимости от расы манчкина')),
                ('can_drive_away', models.BooleanField(verbose_name='Может просто прогнать монстра')),
                ('damage_modificator', models.SmallIntegerField(verbose_name='Сколько уровней теряет манчкин при поражении в зависимости от расы')),
                ('adv_treasure', models.SmallIntegerField(default=0, verbose_name='Манчкин в зависимости от расы тянет дополнительные сокровища')),
                ('monster', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='munchkin.MonsterCard')),
                ('race', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='munchkin.RaceCard')),
            ],
        ),
        migrations.CreateModel(
            name='OtherCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('munchkin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='monstercard',
            name='munchkin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin'),
        ),
        migrations.AddField(
            model_name='monstercard',
            name='not_indifferent_klasses',
            field=models.ManyToManyField(through='munchkin.KlassRelationShip', to='munchkin.KlassCard'),
        ),
        migrations.AddField(
            model_name='monstercard',
            name='not_indifferent_races',
            field=models.ManyToManyField(through='munchkin.RaceRelationShip', to='munchkin.RaceCard'),
        ),
        migrations.CreateModel(
            name='ModificatorCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('bonus', models.SmallIntegerField(default=0, verbose_name='размер бонуса модификатора')),
                ('treasure_bonus', models.SmallIntegerField(default=0, verbose_name='кол-во дополнительных сокровищ за модифицированного монстра')),
                ('is_monster_only', models.BooleanField(default=False, verbose_name='модификатор монстра')),
                ('munchkin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='klassrelationship',
            name='monster',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='munchkin.MonsterCard'),
        ),
        migrations.AddField(
            model_name='klasscard',
            name='munchkin',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin'),
        ),
        migrations.CreateModel(
            name='Fighting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_tres', models.SmallIntegerField(default=0, verbose_name='Количество сокровищ в награду помощнику')),
                ('reward_level', models.SmallIntegerField(default=0, verbose_name='Количество уровней в награду помощнику')),
                ('is_need_help', models.BooleanField(default=False, verbose_name='Нужна ли манчкину помощь')),
                ('monster_modifs', models.ManyToManyField(related_name='monster_modifs', to='munchkin.ModificatorCard')),
                ('monsters', models.ManyToManyField(to='munchkin.MonsterCard')),
                ('munchkin_modifs', models.ManyToManyField(related_name='munchkin_modifs', to='munchkin.ModificatorCard')),
                ('munchkins', models.ManyToManyField(to='munchkin.Munchkin')),
            ],
        ),
        migrations.CreateModel(
            name='CurseCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='название')),
                ('description', models.TextField(max_length=500, verbose_name='описание')),
                ('image', models.ImageField(upload_to='', verbose_name='изображение карты')),
                ('touched', models.DateTimeField(auto_now=True, verbose_name='Время последней операции с картой')),
                ('status', models.CharField(choices=[('в руке игрока', 'в руке игрока'), ('карта в сбросе сокровищ', 'карта в сбросе сокровищ'), ('карта в сбросе дверей', 'карта в сбросе дверей'), ('Карта в игре, на столе перед игроком', 'Карта в игре, на столе перед игроком'), ('Карта в бою', 'Карта в бою'), ('Карта в колоде и не роздана', 'Карта в колоде и не роздана')], default='Карта в колоде и не роздана', max_length=40, verbose_name='Где находится карта')),
                ('lose_level_count', models.PositiveSmallIntegerField(default=0, verbose_name='сколько уровней теряет манчкин')),
                ('lose_all_staffs', models.BooleanField(default=False, verbose_name='потеряй все шмотки')),
                ('is_one_time', models.BooleanField(default=True, verbose_name='разовое проклятие')),
                ('munchkin', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='munchkin.Munchkin')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
